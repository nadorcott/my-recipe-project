const pgp = require("pg-promise")();
require("dotenv").config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

const db = pgp(process.env.DATABASE_URL); // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –±–∞–∑—ã –∏–∑ .env

db.connect()
  .then((obj) => {
    console.log("‚úÖ Connected to the database");
    obj.done(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  })
  .catch((error) => {
    console.error("‚ùå Database connection error:", error);
  });

async function initDB() {
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await db.none('CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE NOT NULL, password TEXT NOT NULL );');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await db.none(
      'CREATE TABLE IF NOT EXISTS recipes ( id SERIAL PRIMARY KEY,title TEXT NOT NULL,description TEXT NOT NULL,ingredients TEXT NOT NULL,instructions TEXT NOT NULL,image_url TEXT,category TEXT,user_id INTEGER REFERENCES users(id));'
    );

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã");

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userCount = await db.one("SELECT COUNT(*) FROM users");
    if (parseInt(userCount.count) === 0) {
      const user = await db.one(
        `INSERT INTO users (name, email, password)
         VALUES ($1, $2, $3)
         RETURNING *`,
        ["Demo User", "demo@example.com", "password123"]
      );

      // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.none(
        `INSERT INTO recipes (title, description, ingredients, instructions, image_url, category, user_id)
         VALUES ($1, $2, $3, $4, $5, $6, $7)`,
        [
          "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏",
          "–ü—Ä–æ—Å—Ç–æ–π –∏ –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã.",
          "–º–∞–∫–∞—Ä–æ–Ω—ã, –ø–æ–º–∏–¥–æ—Ä—ã, —á–µ—Å–Ω–æ–∫, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü",
          "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –º–∞–∫–∞—Ä–æ–Ω—ã. 2. –û–±–∂–∞—Ä—å—Ç–µ —Ç–æ–º–∞—Ç—ã —Å —á–µ—Å–Ω–æ–∫–æ–º. 3. –°–º–µ—à–∞–π—Ç–µ –∏ –ø–æ–¥–∞–≤–∞–π—Ç–µ.",
          "https://example.com/image.jpg",
          "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è",
          user.id
        ]
      );

      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç");
    } else {
      console.log("üì¶ –ë–∞–∑–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:", err);
  }
}

initDB();

module.exports = db; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã

